{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open Data Hub - Highlander project Open Data Hub, enhanced with Easybuild and Lmod, or how to bring thousands of libraries and applications to your data science platform without installation! On a data science platform like Open Data Hub or OpenShift Data Science , Container images are hard to manage if you want to provide users with many different libraries or applications , moreover at various versions . This project leverages EasyBuild , Lmod and shared PVCs to bring thousands of those apps and libraries instantly in your notebook. You now have a single container image to manage to provide all of them, in any combination you want, at any version you want! (Therefore the name of the project, \"There can be only one\u2026\u200b\") WIP, beware... This project is a work in progress to properly refactor the initial code, which is meanwhile still available in different repos, here , here and here","title":"Home"},{"location":"#open-data-hub-highlander-project","text":"Open Data Hub, enhanced with Easybuild and Lmod, or how to bring thousands of libraries and applications to your data science platform without installation! On a data science platform like Open Data Hub or OpenShift Data Science , Container images are hard to manage if you want to provide users with many different libraries or applications , moreover at various versions . This project leverages EasyBuild , Lmod and shared PVCs to bring thousands of those apps and libraries instantly in your notebook. You now have a single container image to manage to provide all of them, in any combination you want, at any version you want! (Therefore the name of the project, \"There can be only one\u2026\u200b\") WIP, beware... This project is a work in progress to properly refactor the initial code, which is meanwhile still available in different repos, here , here and here","title":"Open Data Hub - Highlander project"},{"location":"action/","text":"What does it look like? With the help of a great Jupyter extension to easily load those shared modules, it\u2019s really easy! Have a look: But of course you're not limited to using Jupyter to take advantage of this approach. Any container image can have this shared library mounted at spawn time and available. The only thing required to load the applications or libraries is LMod, which is very easily installed and configured in any image.","title":"Highlander in action"},{"location":"action/#what-does-it-look-like","text":"With the help of a great Jupyter extension to easily load those shared modules, it\u2019s really easy! Have a look: But of course you're not limited to using Jupyter to take advantage of this approach. Any container image can have this shared library mounted at spawn time and available. The only thing required to load the applications or libraries is LMod, which is very easily installed and configured in any image.","title":"What does it look like?"},{"location":"architecture/","text":"Highlander architecture Multiple components and mechanisms are used to create and run the environment. Let's list them and see how they work together. Module building Modules are created using EasyBuild . They are based on configurations that you will find in the highlander-easyconfigs repository. In the module-builder repository, you will find the recipe for a container image that will be ready to use to build your modules. Of course a pre-built image is available. Module management This tool allows you to easily manage modules in your shared libraries: you can launch local builds, or directly fetch pre-built modules from repositories. You can also choose which module you want to show to your users, and which ones you want to promote. Two repositories are available for this tool: module-manager-backend and module-manager-frontend . JupyterLab extension The jupyterlab-extension extension provides a new menu in JupyterLab to easily browse available modules, load/unload them, or create your collections for easy environment setup. JupyterLab In the jupyterlab-highlander repository, you will find the recipe to create a JupyterLab container image that will include the necessary components and configuration to dynamically load modules from the shared library. Of course a pre-built image is available.","title":"Architecture"},{"location":"architecture/#highlander-architecture","text":"Multiple components and mechanisms are used to create and run the environment. Let's list them and see how they work together.","title":"Highlander architecture"},{"location":"architecture/#module-building","text":"Modules are created using EasyBuild . They are based on configurations that you will find in the highlander-easyconfigs repository. In the module-builder repository, you will find the recipe for a container image that will be ready to use to build your modules. Of course a pre-built image is available.","title":"Module building"},{"location":"architecture/#module-management","text":"This tool allows you to easily manage modules in your shared libraries: you can launch local builds, or directly fetch pre-built modules from repositories. You can also choose which module you want to show to your users, and which ones you want to promote. Two repositories are available for this tool: module-manager-backend and module-manager-frontend .","title":"Module management"},{"location":"architecture/#jupyterlab-extension","text":"The jupyterlab-extension extension provides a new menu in JupyterLab to easily browse available modules, load/unload them, or create your collections for easy environment setup.","title":"JupyterLab extension"},{"location":"architecture/#jupyterlab","text":"In the jupyterlab-highlander repository, you will find the recipe to create a JupyterLab container image that will include the necessary components and configuration to dynamically load modules from the shared library. Of course a pre-built image is available.","title":"JupyterLab"},{"location":"problem/","text":"The problem When you manage shared data science environments based on Kubernetes on OpenShift , like Open Data Hub or OpenShift Data Science , you may face a container image management problem . That is especially true with interactive environments like Jupyter-as-a-Service. Your users will want to use various Jupyter images that include this or this library or application , at this or this specific version . Of course it\u2019s clearly impossible to create behemoth images including each and every library you\u2019re asked for, or to create and manage hundreds (thousands?) of variations of handpicked selection of libraries and apps to fit a specific need. Granted, you could let the users pip or conda install everything from scratch every time they launch the environment. But it\u2019s not that practical, not all packages are available through this mean, especially your own private applications. Moreover, in an enterprise environment, the as-a-service container won\u2019t run as root, so no package can be yum or apt-get installed. So you are basically stuck with those different options:","title":"The problem"},{"location":"problem/#the-problem","text":"When you manage shared data science environments based on Kubernetes on OpenShift , like Open Data Hub or OpenShift Data Science , you may face a container image management problem . That is especially true with interactive environments like Jupyter-as-a-Service. Your users will want to use various Jupyter images that include this or this library or application , at this or this specific version . Of course it\u2019s clearly impossible to create behemoth images including each and every library you\u2019re asked for, or to create and manage hundreds (thousands?) of variations of handpicked selection of libraries and apps to fit a specific need. Granted, you could let the users pip or conda install everything from scratch every time they launch the environment. But it\u2019s not that practical, not all packages are available through this mean, especially your own private applications. Moreover, in an enterprise environment, the as-a-service container won\u2019t run as root, so no package can be yum or apt-get installed. So you are basically stuck with those different options:","title":"The problem"},{"location":"rwx/","text":"ROX/RWX volume for the shared library As explained in the Introduction , you need a ROX volume to store the shared library. Obviously you will need to be able to write into it at some point to populate the library, so in fact what you need is an RWX volume (read write many). It will simply be mounted in a Read-Only mode in the pods that will use the library, and Read-Write in the pod you will use to add modules to the library. Here are different options. CephFS The reference architecture for this project leverages CephFS through Rook or OpenShift Data Foundation. This directly provides an RWX storageClass that you can use for the library. NFS Provisioner In case you don't have access to CephFS, this project provides a method to install a simple NFS Provisioner and Server. It will create a new StorageClass with RWX capabilities that you will be able to use to create a volume for the library. You will find all the instructions and code in this repository: https://github.com/odh-highlander/nfs-server-and-provisioner","title":"ROX/RWX Volume"},{"location":"rwx/#roxrwx-volume-for-the-shared-library","text":"As explained in the Introduction , you need a ROX volume to store the shared library. Obviously you will need to be able to write into it at some point to populate the library, so in fact what you need is an RWX volume (read write many). It will simply be mounted in a Read-Only mode in the pods that will use the library, and Read-Write in the pod you will use to add modules to the library. Here are different options.","title":"ROX/RWX volume for the shared library"},{"location":"rwx/#cephfs","text":"The reference architecture for this project leverages CephFS through Rook or OpenShift Data Foundation. This directly provides an RWX storageClass that you can use for the library.","title":"CephFS"},{"location":"rwx/#nfs-provisioner","text":"In case you don't have access to CephFS, this project provides a method to install a simple NFS Provisioner and Server. It will create a new StorageClass with RWX capabilities that you will be able to use to create a volume for the library. You will find all the instructions and code in this repository: https://github.com/odh-highlander/nfs-server-and-provisioner","title":"NFS Provisioner"},{"location":"solution/","text":"The solution This project aims to provide tools and instructions for a different approach to the problem, thanks to the HPC community who has solved it a long time ago! This is kind of a portage of their solution to Kubernetes. The idea is that instead of building the needed applications and libraries into the container images, you can store all of them in a read-only shared library on a ROX volume (read-only, but by many pods simultaneously), and mount this volume inside the Pods at spawn time. Then, leveraging Linux Environment Modules with Lmod , it gets easy to dynamically \"load\" what you need, when you need it, instantly\u2026\u200b Pretty neat, uh? This is a very high-level schematic of what's happening: And with Easybuild , you have access to a few thousands of ready to use (or more accurately to compile, we\u2019ll come to that) software packages, plus the full machinery to easily create you owns.","title":"The solution"},{"location":"solution/#the-solution","text":"This project aims to provide tools and instructions for a different approach to the problem, thanks to the HPC community who has solved it a long time ago! This is kind of a portage of their solution to Kubernetes. The idea is that instead of building the needed applications and libraries into the container images, you can store all of them in a read-only shared library on a ROX volume (read-only, but by many pods simultaneously), and mount this volume inside the Pods at spawn time. Then, leveraging Linux Environment Modules with Lmod , it gets easy to dynamically \"load\" what you need, when you need it, instantly\u2026\u200b Pretty neat, uh? This is a very high-level schematic of what's happening: And with Easybuild , you have access to a few thousands of ready to use (or more accurately to compile, we\u2019ll come to that) software packages, plus the full machinery to easily create you owns.","title":"The solution"},{"location":"jupyterlab-extension/advanced-usage/","text":"Advanced functions Collections If you want to create a specific environment with a set of different modules that you want to use, you don't need to recreate this from scratch every time! You can simply load those modules, then create a Collection . Next time, you can just restore this collection in two clicks. Create a collection To create a collection, load the modules you want, click on the icon and give a name to the collection. Load a collection When you want to bring back this environment, just click on the Restore icon, and select and load your collection. Imports You can also directly work from your notebooks and your scripts to load the modules that you need. To know which modules you have to use, you can directly export the relevant Python code! Click on the Generate Python code icon: You can then copy/paste the full code in you first notebook cell or in your script: Don't forget! Of course, for this to work in your notebook or your script, the container image or environment you are using must be \"lmod-enabled\", and the library with the relevant modules must be accessible/mounted into this environment.","title":"Advanced functions"},{"location":"jupyterlab-extension/advanced-usage/#advanced-functions","text":"","title":"Advanced functions"},{"location":"jupyterlab-extension/advanced-usage/#collections","text":"If you want to create a specific environment with a set of different modules that you want to use, you don't need to recreate this from scratch every time! You can simply load those modules, then create a Collection . Next time, you can just restore this collection in two clicks.","title":"Collections"},{"location":"jupyterlab-extension/advanced-usage/#create-a-collection","text":"To create a collection, load the modules you want, click on the icon and give a name to the collection.","title":"Create a collection"},{"location":"jupyterlab-extension/advanced-usage/#load-a-collection","text":"When you want to bring back this environment, just click on the Restore icon, and select and load your collection.","title":"Load a collection"},{"location":"jupyterlab-extension/advanced-usage/#imports","text":"You can also directly work from your notebooks and your scripts to load the modules that you need. To know which modules you have to use, you can directly export the relevant Python code! Click on the Generate Python code icon: You can then copy/paste the full code in you first notebook cell or in your script: Don't forget! Of course, for this to work in your notebook or your script, the container image or environment you are using must be \"lmod-enabled\", and the library with the relevant modules must be accessible/mounted into this environment.","title":"Imports"},{"location":"jupyterlab-extension/basic-usage/","text":"Basic usage The JupyterLab extension for Highlander allows you to quickly search for, load or unload libraries and applications. Within JupyterLab you have access to a new extension on the left menu, called \"Softwares\". Here are basic instructions on how to use it. The modules (applications or libraries) are splitted into two main categories: the featured modules, and all the available modules: For each category, you can see which modules are available and loaded. Search for a module You can use the filter box to search for a specific module (just enter a few letters). Filtering happens simultaneously on both lists: If you click on a module name, a pop-up will give you more information: description, dependencies,\u2026\u200b Load a module To load a module, hover on it and click on the \"Load\" button: The module and all its dependencies is automatically loaded (torchvision in this example): Unload a module To unload a module, hover it the \"loaded\" list, and click \"Unload\": The module and its dependencies will be automatically unloaded. Good to know! Lmod keeps track of the loaded dependencies for each module. If two different modules share dependencies, a module unloading won\u2019t affect the other one, its dependencies will still be there. There are only unloaded when no module needs them anymore!","title":"Basic usage"},{"location":"jupyterlab-extension/basic-usage/#basic-usage","text":"The JupyterLab extension for Highlander allows you to quickly search for, load or unload libraries and applications. Within JupyterLab you have access to a new extension on the left menu, called \"Softwares\". Here are basic instructions on how to use it. The modules (applications or libraries) are splitted into two main categories: the featured modules, and all the available modules: For each category, you can see which modules are available and loaded.","title":"Basic usage"},{"location":"jupyterlab-extension/basic-usage/#search-for-a-module","text":"You can use the filter box to search for a specific module (just enter a few letters). Filtering happens simultaneously on both lists: If you click on a module name, a pop-up will give you more information: description, dependencies,\u2026\u200b","title":"Search for a module"},{"location":"jupyterlab-extension/basic-usage/#load-a-module","text":"To load a module, hover on it and click on the \"Load\" button: The module and all its dependencies is automatically loaded (torchvision in this example):","title":"Load a module"},{"location":"jupyterlab-extension/basic-usage/#unload-a-module","text":"To unload a module, hover it the \"loaded\" list, and click \"Unload\": The module and its dependencies will be automatically unloaded. Good to know! Lmod keeps track of the loaded dependencies for each module. If two different modules share dependencies, a module unloading won\u2019t affect the other one, its dependencies will still be there. There are only unloaded when no module needs them anymore!","title":"Unload a module"},{"location":"library/building/","text":"Building the library Coming soon...","title":"Building the library"},{"location":"library/building/#building-the-library","text":"Coming soon...","title":"Building the library"},{"location":"library/quick-deployment/","text":"Quick deployment Coming soon...","title":"Quick deployment"},{"location":"library/quick-deployment/#quick-deployment","text":"Coming soon...","title":"Quick deployment"}]}